
// 1. Remove left recursion from the grammar G
public static List<String> removeLeftRecursion(List<String> grammar) {
List<String> newGrammar = new ArrayList<>();
// Iterate over each non-terminal in the grammar
for (String production : grammar) {
String[] parts = production.split("->");
String nonTerminal = parts[0].trim();
String[] alternatives = parts[1].trim().split("\\|");
List<String> withRecursion = new ArrayList<>();
List<String> withoutRecursion = new ArrayList<>();
// Separate productions with and without left recursion
for (String alt : alternatives) {
if (alt.trim().startsWith(nonTerminal)) {
withRecursion.add(alt.trim().substring(nonTerminal.length()).trim() + "
" + nonTerminal + "'");
} else {
withoutRecursion.add(alt.trim() + " " + nonTerminal + "'");
}
}
// 2. Removal of left factoring
public static List<String> leftFactor(List<String> grammar) {
List<String> newGrammar = new ArrayList<>();
// Iterate over each non-terminal in the grammar
for (String production : grammar) {
String[] parts = production.split("->");
String nonTerminal = parts[0].trim();

String[] alternatives = parts[1].trim().split("\\|");
// Find the common prefix among alternatives
String commonPrefix = findCommonPrefix(alternatives);
// If there is a common prefix, perform left factoring
if (!commonPrefix.isEmpty()) {
StringBuilder sb = new StringBuilder();
sb.append(nonTerminal).append(" -> ").append(commonPrefix).append("
").append(nonTerminal).append("'");
newGrammar.add(sb.toString());
StringBuilder sb2 = new StringBuilder();
for (String alt : alternatives) {
if (alt.startsWith(commonPrefix)) {
sb2.append(alt.substring(commonPrefix.length()).trim());
sb2.append(" | ");
}
}
sb2.append("ε");
newGrammar.add(nonTerminal + "' -> " + sb2.toString());
} else {
// If no common prefix, keep the production as is
newGrammar.add(production);
}
}
return newGrammar;
}
// 3. Parse table creation
public class TopDownParser {
public static void main(String[] args) {
// Example grammar: S -> A, A -> aA | ε
Map<String, Set<String>> firstSets = new HashMap<>();
Map<String, Set<String>> followSets = new HashMap<>();
// Construct FIRST sets
firstSets.put("S", new HashSet<>());
firstSets.put("A", new HashSet<>());
firstSets.get("S").add("a");
firstSets.get("A").add("a");
firstSets.get("A").add("ε");

// Construct FOLLOW sets
followSets.put("S", new HashSet<>());
followSets.put("A", new HashSet<>());
followSets.get("S").add("$");
followSets.get("A").add("$");
followSets.get("A").add("a");
// Construct parse table
Map<String, Map<String, String>> parseTable = new HashMap<>();
parseTable.put("S", new HashMap<>());
parseTable.put("A", new HashMap<>());
parseTable.get("S").put("a", "A");
parseTable.get("A").put("a", "aA");
parseTable.get("A").put("$", "ε");
// Print FIRST sets
System.out.println("FIRST sets:");
for (Map.Entry<String, Set<String>> entry : firstSets.entrySet()) {
System.out.println(entry.getKey() + ": " + entry.getValue());
}
// Print FOLLOW sets
System.out.println("\nFOLLOW sets:");
for (Map.Entry<String, Set<String>> entry : followSets.entrySet()) {
System.out.println(entry.getKey() + ": " + entry.getValue());
}
// Print parse table
System.out.println("\nParse Table:");
for (Map.Entry<String, Map<String, String>> entry : parseTable.entrySet()) {
String nonTerminal = entry.getKey();
Map<String, String> actions = entry.getValue();
System.out.println("Non-Terminal: " + nonTerminal);
System.out.println("Actions: " + actions);
}
}
}
